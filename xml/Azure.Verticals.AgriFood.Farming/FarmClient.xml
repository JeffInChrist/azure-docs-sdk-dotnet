<Type Name="FarmClient" FullName="Azure.Verticals.AgriFood.Farming.FarmClient">
  <TypeSignature Language="C#" Value="public class FarmClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FarmClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Verticals.AgriFood.Farming.FarmClient" />
  <TypeSignature Language="VB.NET" Value="Public Class FarmClient" />
  <TypeSignature Language="F#" Value="type FarmClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The Farm service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FarmClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.FarmClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of FarmClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FarmClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.FarmClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, Optional options As FarmBeatsClientOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.Verticals.AgriFood.Farming.FarmClient : Uri * Azure.Core.TokenCredential * Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions -&gt; Azure.Verticals.AgriFood.Farming.FarmClient" Usage="new Azure.Verticals.AgriFood.Farming.FarmClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The endpoint of your FarmBeats resource (protocol and hostname, for example: https://{resourceName}.farmbeats.azure.net). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of FarmClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDataIngestionJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; CreateDataIngestionJob (Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; CreateDataIngestionJob(valuetype Azure.WaitUntil waitUntil, string jobId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.FarmClient.CreateDataIngestionJob(Azure.WaitUntil,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDataIngestionJob (waitUntil As WaitUntil, jobId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member CreateDataIngestionJob : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.CreateDataIngestionJob : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="farmClient.CreateDataIngestionJob (waitUntil, jobId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil"> "F:Azure.WaitUntil.Completed" if the method should wait to return until the long-running operation has completed on the service; "F:Azure.WaitUntil.Started" if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="jobId"> Job ID supplied by user. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Create a farm operation data ingestion job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              farmerId: string (required),
              authProviderId: string (required),
              operations: [string],
              startYear: number (required),
              id: string,
              status: string,
              durationInSeconds: number,
              message: string,
              createdDateTime: string (ISO 8601 Format),
              lastActionDateTime: string (ISO 8601 Format),
              startTime: string (ISO 8601 Format),
              endTime: string (ISO 8601 Format),
              name: string,
              description: string,
              properties: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              farmerId: string,
              authProviderId: string,
              operations: [string],
              startYear: number,
              id: string,
              status: string,
              durationInSeconds: number,
              message: string,
              createdDateTime: string (ISO 8601 Format),
              lastActionDateTime: string (ISO 8601 Format),
              startTime: string (ISO 8601 Format),
              endTime: string (ISO 8601 Format),
              name: string,
              description: string,
              properties: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  innererror: InnerError
                }
              },
              traceId: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDataIngestionJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; CreateDataIngestionJobAsync (Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; CreateDataIngestionJobAsync(valuetype Azure.WaitUntil waitUntil, string jobId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.FarmClient.CreateDataIngestionJobAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDataIngestionJobAsync (waitUntil As WaitUntil, jobId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member CreateDataIngestionJobAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.CreateDataIngestionJobAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="farmClient.CreateDataIngestionJobAsync (waitUntil, jobId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil"> "F:Azure.WaitUntil.Completed" if the method should wait to return until the long-running operation has completed on the service; "F:Azure.WaitUntil.Started" if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="jobId"> Job ID supplied by user. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Create a farm operation data ingestion job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              farmerId: string (required),
              authProviderId: string (required),
              operations: [string],
              startYear: number (required),
              id: string,
              status: string,
              durationInSeconds: number,
              message: string,
              createdDateTime: string (ISO 8601 Format),
              lastActionDateTime: string (ISO 8601 Format),
              startTime: string (ISO 8601 Format),
              endTime: string (ISO 8601 Format),
              name: string,
              description: string,
              properties: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              farmerId: string,
              authProviderId: string,
              operations: [string],
              startYear: number,
              id: string,
              status: string,
              durationInSeconds: number,
              message: string,
              createdDateTime: string (ISO 8601 Format),
              lastActionDateTime: string (ISO 8601 Format),
              startTime: string (ISO 8601 Format),
              endTime: string (ISO 8601 Format),
              name: string,
              description: string,
              properties: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  innererror: InnerError
                }
              },
              traceId: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataIngestionJobDetails">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetDataIngestionJobDetails (string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetDataIngestionJobDetails(string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.FarmClient.GetDataIngestionJobDetails(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataIngestionJobDetails (jobId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetDataIngestionJobDetails : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetDataIngestionJobDetails : string * Azure.RequestContext -&gt; Azure.Response" Usage="farmClient.GetDataIngestionJobDetails (jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> ID of the job. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get a farm operation data ingestion job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              farmerId: string,
              authProviderId: string,
              operations: [string],
              startYear: number,
              id: string,
              status: string,
              durationInSeconds: number,
              message: string,
              createdDateTime: string (ISO 8601 Format),
              lastActionDateTime: string (ISO 8601 Format),
              startTime: string (ISO 8601 Format),
              endTime: string (ISO 8601 Format),
              name: string,
              description: string,
              properties: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  innererror: InnerError
                }
              },
              traceId: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataIngestionJobDetailsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetDataIngestionJobDetailsAsync (string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetDataIngestionJobDetailsAsync(string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.FarmClient.GetDataIngestionJobDetailsAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataIngestionJobDetailsAsync (jobId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetDataIngestionJobDetailsAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetDataIngestionJobDetailsAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="farmClient.GetDataIngestionJobDetailsAsync (jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> ID of the job. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get a farm operation data ingestion job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              farmerId: string,
              authProviderId: string,
              operations: [string],
              startYear: number,
              id: string,
              status: string,
              durationInSeconds: number,
              message: string,
              createdDateTime: string (ISO 8601 Format),
              lastActionDateTime: string (ISO 8601 Format),
              startTime: string (ISO 8601 Format),
              endTime: string (ISO 8601 Format),
              name: string,
              description: string,
              properties: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  innererror: InnerError
                }
              },
              traceId: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Verticals.AgriFood.Farming.FarmClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Verticals.AgriFood.Farming.FarmClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
